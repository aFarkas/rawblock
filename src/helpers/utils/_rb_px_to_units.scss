
////
/// @group functions
////

$rb-base-fontsize: 100% !default;

/// Convert one or more pixel values to matching unit values.
///
/// @param {Number} $values - Value(s) to convert
/// @param {Number} $base-value - Value to use as base. If null then $base-fontsize is used.
/// @param {String} $unit | default: rem | Set unit rem or em.
@function rb-convert-px-to-unit($values, $base-value: null, $unit: rem)  {
    @if $base-value == null {
        $base-value: $rb-base-fontsize;
    }

    @if($values == 'auto') {
        @return $values;
    }

    @if (unitless($values)) {
        $values: $values * 1px;
    }

    @if type-of($base-value ) == number {
        @if (unit($base-value) == '%') {
            $base-value: rb-strip-unit($base-value);
            $base-value: (16 / 100) * $base-value * 1px;
        }
        @elseif (unitless($base-value)) {
            $base-value: $base-value * 1px;
        }
    }

    $values: ($values / $base-value) + $unit;

    @if ($values == ('0' + $unit)) {
        $values: 0;  // Turn 0rem/0em into 0
    }

    @return $values;
}

/// Convert one or more pixel values to rem unit.
///
/// @param {Number} $value - Value(s) to convert
/// @param {Number} $base-value - Value to use as base. If null then $base-fontsize is used.
@function rb-rem-calc($values, $base-value: null) {
    $value-length: length($values);
    $rem-values: ();

    @if $value-length == 1 {
        @return rb-convert-px-to-unit(nth($values, 1));
    }

    @for $i from 1 through $value-length {
        $rem-values: append($rem-values, rb-convert-px-to-unit(nth($values, $i), $base-value));
    }

    @return $rem-values;
}

/// Convert one or more pixel values to em unit.
///
/// @param {Number} $value - Value(s) to convert
/// @param {Number} $base-value - Value to use as base. If null then $base-fontsize is used.
@function rb-em-calc($values, $base-value: null) {
    $value-length: length($values);
    $em-values: ();

    @if $value-length == 1 {
        @return rb-convert-px-to-unit(nth($values, 1), $base-value, em);
    }

    @for $i from 1 through $value-length {
        $em-values: append($em-values, rb-convert-px-to-unit(nth($values, $i), $base-value, em));
    }

    @return $em-values;
}
