@function rb-escape-quotes($string, $prepend: '') {
    $newstring: $string;

    @if type-of($string) == "string" {
        $length: str_length($string);
        $index: str_index($string, '"');

        @if $index and $index > 0 {
            @if $prepend == '' {
                @warn 'doubble quote found in "' + $string + '" will convert to single quote.';
            }
            $prepend: str_slice($string, 0, $index - 1) + "'";
            $newstring: rb-escape-quotes((str_slice($string, $index + 1, $length + 1)), $prepend);
        }

        @return $prepend + $newstring;
    }
    @return $string;
}

@function rb-stringify($data) {
    $string: "";
    $type: type-of($data);

    @if type-of($data) == 'color' {
        $data: inspect($data);
        $type: 'string';
    }

    @if $type == "map" {
        $string: $string + "{";

        @each $key, $value in $data {
            $string: $string + '"' + $key + '":' + rb-stringify($value) +',';
        }

        $string: str-slice($string, 0, str-length($string) - 1) + '}';
    } @else if $type == "list" {
        $string: $string + "[";

        @if length($data) != 0 {
            @for $i from 1 through length($data) {
                $string: $string + rb-stringify(nth($data, $i)) +',';
            }
        }

        $string: str-slice($string, 0, str-length($string) - 1)  + ']';
    } @else if $type == "number" and unitless($data) {
        $string: $string + $data;
    } @else if $type == "string" or $type == "number" {
        $string: $string + ' "' + rb-escape-quotes($data) + '"';
    } @else if $type == "bool" {
        $string: $string + $data;
    } @else {
        $string: $string + 'null';
    }

    @return $string;
}

@mixin rb-js-export($data) {
    $string: rb-stringify($data);
    content: $string !important;

    &::before {
        content: $string !important;
        font-family: $string !important;
        visibility: hidden !important;
        display: block !important;
        height: 0 !important;
        width: 0;
        clear: both;
        overflow: hidden;
    }
}

$rb-included-global-custom-vars: ();

@mixin rb-custom-var($prop, $value, $stopInheritance: true){
    #{$prop}: $value;

    @if $stopInheritance and not map_has_key($rb-included-global-custom-vars, $prop) {
        $rb-included-global-custom-vars: map-merge($rb-included-global-custom-vars, (#{$prop}: true)) !global;
        @at-root(without:all) {
            * {#{$prop}: initial;}
        }
    }
}

@function rb-join($list, $glue: "", $is-nested: false) {
    $result: null;

    @for $i from 1 through length($list) {
        $e: nth($list, $i);

        @if type-of($e) == list {
            $result: $result#{rb-join($e, $glue, true)};
        }

        @else {
            $result: if($i != length($list) or $is-nested, $result#{$e}#{$glue}, $result#{$e});
        }
    }

    @return $result;
}

$rb-included-global-watch-css-selectors: ();

@mixin rb-add-watch-css {
    $watch-list: ();

    @each $selector in & {
        @if not map_has_key($rb-included-global-watch-css-selectors, "#{$selector}") {
            $rb-included-global-watch-css-selectors: map-merge($rb-included-global-watch-css-selectors, ("#{$selector}": true)) !global;
            $watch-list: append($watch-list, "#{$selector}");
        }
    }

    @if length($watch-list) > 0 {
        @at-root(without:all) {
            #{rb-join($watch-list, ",")} {
                @include rb-custom-var(--rb-watch-css, true);
            }
        }
    }
}

@mixin rb-js-export-next($data, $prefix: 'rb-cfg', $add-watch-css: true) {
    $end-value: "";
    $need-inheritance-stop: false;
    $inheritance-list: ();
    $string: rb-stringify($data);
    $prefix: '--' + $prefix + '-';

    @each $prop, $value in $data {
        $end-value: $prefix + $prop;
        @include rb-custom-var($end-value, rb-stringify($value), false);

        @if not map_has_key($rb-included-global-custom-vars, $end-value) {
            $inheritance-list: append($inheritance-list, $end-value);
        }
    }

    @if $add-watch-css {
        @include rb-add-watch-css();
    }

    @if length($inheritance-list) > 0 {
        @at-root(without:all) {
            * {
                @each $prop in $inheritance-list {
                    $rb-included-global-custom-vars: map-merge($rb-included-global-custom-vars, (#{$prop}: true)) !global;
                    #{$prop}: initial;
                }
            }
        }
    }
}

// old/deprecated API:
@function rbToJSON($data) {
    @return rb-stringify($data);
}

@mixin exportToJS($data) {
    @include rb-js-export($data);
}
